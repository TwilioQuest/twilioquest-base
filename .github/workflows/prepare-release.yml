name: Prepare Release
on:
  # Allows this workflow to be started manually from the 'Actions' page of the repo
  workflow_dispatch:
    inputs:
      release_type:
        type: choice
        options:
          - major
          - minor
          - patch
        default: patch
        required: true
  # Allows this workflow to be reused by the workflows in other TwilioQuest extensions
  workflow_call:
    inputs:
      release_type:
        type: string
        default: patch
        required: true

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: 14
      - env:
          # This token is necessary for any step using the gh cli. See https://docs.github.com/en/actions/using-workflows/using-github-cli-in-workflows
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          npm --no-git-tag-version version ${{ inputs.release_type }}
          updated_version=$(node -p "require('./package.json').version")
          git config user.name 'Github Action'
          git config user.email '<>'
          git checkout -b release/${updated_version}
          git add .
          git commit -m "Preparing ${updated_version} Release"
          if ! git push origin release/${updated_version} ; then
            echo "::warning::An existing release exists already! Either act upon the 'Prepare ${updated_version} Release' PR or delete the 'release/${updated_version}' branch!"
          else
            gh pr create --title "Prepare ${updated_version} Release" --body ''
          fi

##COMMENTS##

# Increments part of the package.json version based on 'inputs.release_type' by 1. The option stops npm from automatically
# creating a new commit and tag with the new version.
# >> npm --no-git-tag-version version ${{ inputs.release_type }}

# Sets the updated_version bash variable to the current package.json version
# Here are some helpful resources:
# The $() command substitution - https://www.gnu.org/software/bash/manual/html_node/Command-Substitution.html
# The use of 'node -p' - https://nodejs.org/api/cli.html#-p---print-script
# >> updated_version=$(node -p "require('./package.json').version")
